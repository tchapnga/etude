public interface PDFProjection {
    String getId();
    String getZekPdf();
    String getFormulairesPdf();
    String getRapportDecisionPdf();
}


@Query("SELECT p.id AS id, p.zekPdf AS zekPdf, p.formulairesPdf AS formulairesPdf, p.rapportDecisionPdf AS rapportDecisionPdf FROM PDFEntity p")
Stream<PDFProjection> streamAll();

@RestController
public class PDFController {

    private final PDFService pdfService;

    @Autowired
    public PDFController(PDFService pdfService) {
        this.pdfService = pdfService;
    }

    @GetMapping("/process-pdfs")
    public String processPdfs() {
        try {
            pdfService.processPDFs();
            return "Traitement terminé avec succès. Rapport disponible.";
        } catch (Exception e) {
            e.printStackTrace();
            return "Erreur lors du traitement des PDFs.";
        }
    }
}

@Service
public class PDFService {

    private final PDFRepository pdfRepository;

    @Value("${pdf.storage.directory}")
    private String pdfStorageDirectory;

    @Value("${excel.report.directory}")
    private String excelReportDirectory;

    public PDFService(PDFRepository pdfRepository) {
        this.pdfRepository = pdfRepository;
    }

    public void processPDFs() throws Exception {
        try (Stream<PDFProjection> pdfStream = pdfRepository.streamAll()) {
            int fileIndex = 1;
            int rowCount = 0;
            final int MAX_ROWS_PER_FILE = 10_000;

            Workbook workbook = new SXSSFWorkbook(); // Optimisé pour les gros fichiers Excel
            Sheet sheet = workbook.createSheet("Rapport de traitement");
            createHeader(sheet);

            for (PDFProjection dto : (Iterable<PDFProjection>) pdfStream::iterator) {
                try {
                    Row row = sheet.createRow(rowCount++);
                    row.createCell(0).setCellValue(dto.getId());
                    row.createCell(1).setCellValue(savePdf(dto.getId(), dto.getZekPdf(), "ZEK"));
                    row.createCell(2).setCellValue(savePdf(dto.getId(), dto.getFormulairesPdf(), "Formulaires_PDF"));
                    row.createCell(3).setCellValue(savePdf(dto.getId(), dto.getRapportDecisionPdf(), "Rapport_decision"));

                    if (rowCount >= MAX_ROWS_PER_FILE) {
                        saveExcelFile(workbook, "Rapport_" + fileIndex++);
                        workbook = new SXSSFWorkbook();
                        sheet = workbook.createSheet("Rapport de traitement");
                        createHeader(sheet);
                        rowCount = 0;
                    }
                } catch (Exception e) {
                    System.err.println("Erreur lors du traitement de l'entité ID=" + dto.getId());
                    e.printStackTrace();
                }
            }

            // Sauvegarder le dernier fichier Excel
            if (rowCount > 0) {
                saveExcelFile(workbook, "Rapport_" + fileIndex++);
            }

            // Agréger les fichiers Excel en un seul fichier
            aggregateExcelFiles(fileIndex - 1);

            // Compresser tous les fichiers Excel (y compris l'agrégé)
            compressGeneratedExcelFiles(fileIndex - 1);

        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Erreur lors du traitement des PDFs.");
        }
    }

    private void createHeader(Sheet sheet) {
        Row headerRow = sheet.createRow(0);
        headerRow.createCell(0).setCellValue("ID");
        headerRow.createCell(1).setCellValue("ZEK_PDF");
        headerRow.createCell(2).setCellValue("Formulaires_PDF");
        headerRow.createCell(3).setCellValue("Rapport_decision_PDF");
    }

    private String savePdf(String id, String hexData, String directoryName) {
        if (hexData == null || hexData.isEmpty()) {
            return "KO";
        }
        try (FileOutputStream fos = new FileOutputStream(new File(new File(pdfStorageDirectory, directoryName), id + ".pdf"))) {
            byte[] pdfData = DatatypeConverter.parseHexBinary(hexData);
            fos.write(pdfData);
            return "OK";
        } catch (Exception e) {
            e.printStackTrace();
            return "KO";
        }
    }

    private void saveExcelFile(Workbook workbook, String fileName) throws IOException {
        String filePath = excelReportDirectory + "/" + fileName + ".xlsx";
        try (FileOutputStream fos = new FileOutputStream(filePath)) {
            workbook.write(fos);
        }
        ((SXSSFWorkbook) workbook).dispose();
        System.out.println("Fichier Excel sauvegardé : " + filePath);
    }

    private void aggregateExcelFiles(int fileCount) throws IOException {
        String aggregatedFilePath = excelReportDirectory + "/Rapport_agrégé.xlsx";
        Workbook aggregatedWorkbook = new SXSSFWorkbook(); // Nouveau fichier Excel agrégé
        Sheet aggregatedSheet = aggregatedWorkbook.createSheet("Rapport de traitement agrégé");
        int rowCount = 0;

        for (int i = 1; i <= fileCount; i++) {
            String filePath = excelReportDirectory + "/Rapport_" + i + ".xlsx";
            try (FileInputStream fis = new FileInputStream(filePath)) {
                Workbook workbook = WorkbookFactory.create(fis);
                Sheet sheet = workbook.getSheetAt(0);

                for (int j = sheet.getFirstRowNum(); j <= sheet.getLastRowNum(); j++) {
                    Row sourceRow = sheet.getRow(j);
                    Row targetRow = aggregatedSheet.createRow(rowCount++);

                    if (sourceRow != null) {
                        for (int k = sourceRow.getFirstCellNum(); k < sourceRow.getLastCellNum(); k++) {
                            Cell sourceCell = sourceRow.getCell(k);
                            Cell targetCell = targetRow.createCell(k);

                            if (sourceCell != null) {
                                switch (sourceCell.getCellType()) {
                                    case STRING:
                                        targetCell.setCellValue(sourceCell.getStringCellValue());
                                        break;
                                    case NUMERIC:
                                        targetCell.setCellValue(sourceCell.getNumericCellValue());
                                        break;
                                    case BOOLEAN:
                                        targetCell.setCellValue(sourceCell.getBooleanCellValue());
                                        break;
                                    case FORMULA:
                                        targetCell.setCellFormula(sourceCell.getCellFormula());
                                        break;
                                    default:
                                        targetCell.setCellValue(sourceCell.toString());
                                }
                            }
                        }
                    }
                }
            }
        }

        try (FileOutputStream fos = new FileOutputStream(aggregatedFilePath)) {
            aggregatedWorkbook.write(fos);
        }
        ((SXSSFWorkbook) aggregatedWorkbook).dispose();
        System.out.println("Rapports agrégés dans : " + aggregatedFilePath);
    }

    private void compressGeneratedExcelFiles(int fileCount) throws IOException {
        String zipPath = excelReportDirectory + "/Rapports_compressés.zip";
        try (FileOutputStream fos = new FileOutputStream(zipPath);
             ZipOutputStream zos = new ZipOutputStream(fos)) {
            for (int i = 1; i <= fileCount; i++) {
                String filePath = excelReportDirectory + "/Rapport_" + i + ".xlsx";
                File fileToZip = new File(filePath);
                try (FileInputStream fis = new FileInputStream(fileToZip)) {
                    ZipEntry zipEntry = new ZipEntry(fileToZip.getName());
                    zos.putNextEntry(zipEntry);

                    byte[] buffer = new byte[1024];
                    int length;
                    while ((length = fis.read(buffer)) >= 0) {
                        zos.write(buffer, 0, length);
                    }
                }
                fileToZip.delete();
            }

            // Ajouter le fichier agrégé au ZIP
            String aggregatedFilePath = excelReportDirectory + "/Rapport_agrégé.xlsx";
            File aggregatedFile = new File(aggregatedFilePath);
            try (FileInputStream fis = new FileInputStream(aggregatedFile)) {
                ZipEntry zipEntry = new ZipEntry(aggregatedFile.getName());
                zos.putNextEntry(zipEntry);

                byte[] buffer = new byte[1024];
                int length;
                while ((length = fis.read(buffer)) >= 0) {
                    zos.write(buffer, 0, length);
                }
            }
        }
        System.out.println("Fichiers compressés dans : " + zipPath);
    }
}
